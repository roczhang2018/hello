The current system is web-based online school information system.It will query student,teacher and course information by API andlater will show the information in the web page.
Technology stack:
    java, Spring Boot for web framework, maven for build , mybatis for ORM ,mysql, junit for unit test .All code should be written in the tech stack mentioned above.
Architecture:
  1. the system has 3 layers, controller, service and dao.
 Constraint:
  1. The api will follow rest-api style.
  2. Test-driven code are preferred.

Now to implement the Requirement.
Requirement:
 1. Query student score by student ID

Provide an overall solution following the guidance mentioned above.Donâ€™t generate code.
 Let's think step by step to describe the solution, and
 break the solution down in task list based on the guidance mentioned above.
 And we will refer this task list as our master plan.

The following are the task list:
Thank you for providing me with the revised master plan. Here it is with more detailed components, methods, and properties:
 1. Create the project skeleton with Java, Spring Boot, Maven, and MyBatis.
   - Create a Spring Boot project using Maven as the build tool.
   - Add the required dependencies for Spring Boot, MyBatis, and MySQL.
   - Configure the MyBatis configuration file to connect to the MySQL database.
 2. Create the database and table for storing student score information.
   - Create a new database in MySQL to store student score information.
   - Create a table to store student ID, course ID, and score.
 3. Define the REST API endpoint for querying student score by student ID.
   - Define a new REST API endpoint with an HTTP GET request method that takes a student ID as a parameter.
   - Map the API endpoint to a specific controller method.
 4. Implement controller layer logic to handle the API request and response.
   - Create a controller class with a method that maps to the API endpoint created in step 3.
   - Implement the business logic to call the service layer and return the required information in the response.
 5. Implement service layer logic to retrieve student score from the database using the DAO layer.
   - Create a service class with a method that retrieves student score from the database using the DAO layer.
   - Implement the business logic to handle any exceptions that may occur during the database interaction.
 6. Implement DAO layer logic to retrieve student score from the database using MyBatis ORM.
   - Create a DAO interface that extends the MyBatis mapper interface.
   - Implement the DAO interface with a MyBatis mapper XML file to retrieve student score from the database.
 7. Write unit tests for controller, service, and DAO layers to ensure code quality and functionality.
   - Create unit tests for the controller, service, and DAO classes using the JUnit framework.
   - Test each component individually and verify that it works as expected.
 8. Integrate all layers together to ensure proper functionality of the whole system.
   - Integrate the controller, service, and DAO layers together and test the entire system.
   - Verify that the API endpoint works as expected and returns the required information.
 9. Deploy the web application on Tomcat web container for access by users.
   - Deploy the web application on a Tomcat web container to make it available to users.
   - Test the application on the server and verify that it works as expected.
 This revised master plan provides a more detailed breakdown of the tasks involved in implementing the required functionality for the online school information system.